#t
#f
40
(if #t 10 20)
(if #f 400 -500)
(+ 1 2)
(+ (+ 1 2) (+ 3 4))
(* 12 (+ 2 13))
(not #t)
(not #f)
(if (not #f) 10 20)
(equal? #t #t)
(equal? #t #f)
(equal? 1 2)
(equal? 1 1)
(< 1 23)
(< 1 (+ -1 3))
(and #t #f)
(and #t #t)
100
(and #f (+ #t #f))
(or #t (+ #t #f))
(if #t 10 (+ #t #f))
(if #f (+ #t #f) 20)
(if #t (+ 2 3) (+ 0 0))
(list 1 2 3 4 5)
(list)
(list 2 (+ 1 2) 4)
(list #t (list 1 2) (list))
(cond [#t 1] [#f 12] [else 13])
(cond [#f 1] [#f 12] [else 13])
(equal? (list 1 2 3) (list 1 2 3))
(equal? (list 1 2 3) (list 1 2 3 4))
(equal? (list 1 2 3) (list 2 5 3))
(equal? #t 1)
200
[#t #f]
(+ (cond [12 12]) 3)
(if (cond [12 #t]) 1 2)
(and 1 2)
(and #t 2)
(cond [else 12])
(cond [#t 2] 1 [else 12])
(cond [#t 2] (list) [else 12])
(cond [1 2] [#t 1] [else 12])
300
(equal? (list #t 1 2) (list #f 2 #t))
(equal? (list #t 1 2) (list #t 1 #f))
(equal? (list #t (+ 2 3) 2) (list #t 5 2))
(equal? (list #t (+ #t 3) 2) (list #t 5 2))
(equal? (list #t (cond 1) 2) (list #t 5 2))
400
(cond [#f (+ #t 3)] [else 12])
(cond [#t (+ #t 3)] [else 12])
500
(empty? (list))
(empty? (list (+ 1 2) 1 2 3))
(empty? (list (+ #t #f) 1 2 3))
(empty? 123)
(list (+ #t #f) 2 3)
600
(first (list 1 2 30))
(rest (list 1 2 3))
(first (list))
(first #t)
(equal? (list 1 2) (list 2 (cond 1)))
(define x 10)
(define f (lambda (x) (* x x)))
(define y 20)
(define z 30)
x
(+ x y)
(+ x a)
(define (g x) (* x x))
g
f
(lambda (x y) (+ x y))
700
(define lambda 1)
(define + 12)
(define not whatever)
(define failed (lambda (x) (+ x a)))
(define a 20)
(failed 3)
(+ (* 2 #t) b)
(empty? (list (+ 1 #t) 2 b))
(define m (cond 1))
(define n (+ 1 #t))
n
800
(let ([a 1] [b 2]) (+ a b))
(let* ([a 1] [b 2]) (+ a b))
(let* ([a 1] [b (+ a 2)]) (+ a b))
(let* ([a 2] [b (* a 2)]) (g (+ a b)))
900
(g 3)
(f 123)
(f 1 2)
(a 200)
(+ a -1)
1000
(define (car x) (first x))
car
(car (list))
(car (list 1 2 3))
-1
(define (fff x) (cond [(equal? x 0) 1] [else (fff (+ x -1))]))
(let ([x 3]) (+ x -1))
fff
(fff 12)
(let ([x 3]) (+ (let ([x 4]) (+ x 1)) 1))
((lambda (x) (+ x 1)) 2)
12345
(and 1 2 3)
(and (cond 1) 2)
(or (cond 1) 2)
(or 1 2 3)
(let ([(cond 1) 2]) 1)
(let* ([(cond 1) 2]) 123)
(let ([cond 1]) 1)
(let* ([cond 1]) 1)
(let* ([(+ 1 2) 3]) 2)
(list (cond 1) 2 3)
(empty? 1 2)
(+ 1 2 3)
9999
(define (fact x) (cond [(equal? x 0) 1] [else (* x (fact (+ x -1)))]))
(fact 12)

(and)
(and #t #f)
(and 1)
(and #f 1) 
(and #t a)
(and 1 a)
(and (cond 1) #f)
(and #t (cond 1))
(and (cond 1))
(and #t #f 10)
(and 1 2 3)
(and #t (and (if #t 1 2) #t))
(and (if #t 1 2) 3)
(and (if #t 1 2) a)
(and (if #t 1 2) #t)
(or)
(or #t #f)
(or 1)
(or #f 1) 
(or #t a)
(or 1 a)
(or #t (cond 1))
(or #f (not a))
(or (cond 1) #f)
(or (cond 1) #f)
(or #t (cond 1))
(or (cond 1))
(or #t #f 10)
(or 1 2 3)
(or #t (or (if #t 1 2) #t))
(or (if #t 1 2) 3)
(or (if #t 1 2) a)
(or (if #t 1 2) #t)
(+)
(+ 1 2)
(+ 1 #t)
(+ 1 a)
(+ (cond 1) #f)
(+ (cond 1) 2)
(+ 1)
(+ 1 2 3)
(+ 1 (+ 1 #t))
(+ #t (+ 1 a))
(+ a (+ 1 #t 2))
(+ a (+ 1 2 3) #t)
(+ a (+ 1 2))
(+ a (and #t 2 3))
(+ 2 3)
(+ a (and (cond 1) #t))
(+ a (and 1 #t) 3)
(+ 1 (and #t #f))
(+ 1 (and #t #f #t))
(+ 1 (+ 1 a))
(+ 1024 1024)
(* 1 2)
(* 1 #t)
(* 1 a)
(* (cond 1) #f)
(* (cond 1) 2)
(* 1)
(* 1 2 3)
(* 1 (* 1 #t))
(+ 10 10)
(* #t (* 1 a))
(* a (* 1 #t 2))
(* a (* 1 2 3) #t)
(* a (+ 1 2))
(* a (and #t 2 3))
(* 2 3)
(* a (and (cond 1) #t))
(* a (and 1 #t) 3)
(* 1 (and #t #f))
(* 1 (and #t #f #t))
(* 1 (+ 1 a))
(* 1 (+ a 2) #t)
(not #t)
(not #f)
(not)
(not #t #t)
(not a)
(not 2)
(not 1 2 3)
(not (if #t #t a))
(not (if #f #f a))
(not (+ 1 3))
(not (* 1 2))
(not (and #t #f))
(not (and #t #t))
(not (or #t #f))
(not (or #f #f))
(< 1 2)
(< 3 2)
(< #t 1)
(< #t a)
(<)
(< 1 2 3)
(< a 2)
(< 1 2 a)
(< (+ 1 2) (+ 2 1))
(< (+ 1 2) (* 1 2 3))
(list 2 3)
(list 2 4 #t)
(list)
(list (+ 1 2 3) 7 10)
(list 2 (+ 1 2 3) a)
(list 2 4 a)
(list 1 2 3 #t (list 2 3 (list (list 2) #f) 7) 8)
(list 2 (cond 2) 2)
(list (list 1 (cond 2) 3) a 2 (list 2))
(list + *)
(list + (* 1 2 3) 7)
(first 1)
(first 1 2)
(first (list))
(first (list 2))
(first (list (list) 2 3))
(first (list 2 3 4))
(first (list (list 7 8 9) 3 4))
(first (list (list 2 3) (+ 1 2 3) 7))
(first (list 2 3 a))
(first (list 2 3 (and #t a)))
(first (list 2 3 (+ 1 2 3)))
(rest 1)
(rest 1 2)
(rest (list))
(rest (list 2))
(rest (list 2 3 4))
(rest (list 2 (list 4 5)))
(rest (list 2 (list 4 5) #t 6))
(rest (list (cond 1) 1 2 3))
(rest (list a 1 2 3))
(rest (list (cond 1) 1 2 3 a))
(equal? 2 2)
(equal? 2 3)
(equal? #t 2)
(equal? #t a)
(equal? 1 2 3)
(equal? (list 2 3 4) (list 2 3 4))
(equal? (list 2 3 4) (list 2 3 5))
(equal? (list 2 3 4) (list 2 3 4 5))
(equal? (list 2 3 4) (list 2 3 #t))
(equal? (list 2 3 4) (list 2 a 4))
(equal? (list 2 3 4) (list 3 a (+ 1 1 1)))
(equal? (list 2 3 4) (list 2))
(if #t 1 2)
(if 1 2 3)
(if 1 2 3 4 5)
(if #t)
(if #t 2)
(if #f (+ 1 2 3) 3)
(if #f (cond 1) 3)
(if #t 2 (+ 1 2 3))
(if #t 2 (cond 1))
(if (not 1) 2 3)
(if (not 1) 2 (cond 1)) 
(if (not 1) 2 a)
(if (not 1) 2 3 4)
(cond [#t 1][else 2])
(cond [#f 1][else 2])
(cond [#t 1])
(cond [else 2])
(cond [#f (cond 1)][#t 10][else 20])
(cond [#f (not 1)][#t 10][else 20])
(cond [#f (not 1 2)][#t 10][else 20])
(cond [#f a][#t 10][else 20])
(cond [#f 20][#t 10][else (cond 1)])
(cond [#f 20][#t 10][else (not 1)])
(cond [#f 20][#t 10][else (not 1 2)])
(cond [#f 20][#t 10][else a])
(cond [#f (cond 1)][#t 10][else a])
(cond [#f a][#t 10][else (cond 1)])
(cond [#f (cond 10)][1 2][else 10])
(cond [#f a][1 2][else 10])
(cond [#f 10][1 3][else 10])
(equal? 2 2)
(equal? 2 3)
(equal? #t 2)
(equal? #t a)
(equal? 1 2 3)
(equal? (list 2 3 4) (list 2 3 4))
(equal? (list 2 3 4) (list 2 3 5))
(equal? (list 2 3 4) (list 2 3 4 5))
(equal? (list 2 3 4) (list 2 3 #t))
(equal? (list 2 3 4) (list 2 a 4))
(equal? (list 2 3 4) (list 3 a (+ 1 1 1)))
(equal? (list 2 3 4) (list 3 3 (cond 1)))
(equal? (list 2 3 4) (list 2))
(define varr 20)
varr
(+ 1 varr)
(define varr 7)
(+ 20 varr)
(+ varr1 20)
(define varr1 99)
(+ varr1 20)
(+ varr varr1)
(define varr2 and)
(define and 20)
(define varr3 10)
(let ([varr3 2][x 2]) varr3)
(let ([varr3 2][x 2]) varr)
(let ([x 10]) 20)
(let ([x 10]) x)
(let ([x 10][y 20]) (+ x y))
(let ([x 10][y x]) y)
(let ([x 10][y a]) x)
(let 10 20)
(let ([x 10] [y 20]) (cond 1))
(let ([x 10] [y x]) (cond 1))
(let ([x 10] [y 2]) (cond 1))
(let ([x 10] [y 2]) (+ a 2))
(let ([x 10] [y x]) (+ a 2))
(let ([10][x 12]) 10)
(let ([list 10]) (+ list 10))
(let* ([x 10]) x)
(let* ([x 10][y 20]) (+ x y))
(let* ([x 10][y x]) (+ x y))
(let* ([x 10][y a]) x)
(let* 10 20)
(let* ([x 10] [y 20]) (cond 1))
(let* ([x 10] [y x]) (cond 1))
(let* ([x 10] [y 2]) (cond 1))
(let* ([x 10] [y 2]) (+ a 2))
(let* ([x 10] [y x]) (+ a 2))
(let* (10) 10)
(let* ([list 20]) (+ list 10))
(let* ([list 30][else 40]) (cond [#f 1][(equal? list 30) 99][else 2]))
(lambda (x) (* x x))
((lambda (x) (* x x)) 4)
(lambda (x) (+ 1 a))
((lambda (x) (+ 1 a)) 5)
(lambda (x) (cond x))
(lambda (x) (cond 1))
((lambda (x) (cond x)) 4)
(lambda (x y) (* x y))
((lambda (x y) (* x y)) 2 3)
(lambda (x y) (+ 1 a))
((lambda (x y) (+ 1 a)) 5 7)
(lambda (x) (cond x))
(define varr5 1024)
(lambda (varr) (+ varr 1024))
((lambda (varr) (+ varr 1024)) 12)
(define (fcnnn1 x) (+ 1 2))
fcnnn1
(fcnnn1 10)
(define (fcnnn2 x) (+ 1 x))
fcnnn2
(fcnnn2 10)
(fcnnn2 abc)
(fcnnn2 varr5)
(fcnnn2 (+ a 2))
(fcnnn2 (+ 1 2 3))
(fcnnn2 (+ 1 2 a))
(fcnnn2 (cond 1))
(define (fcnnn3 x) (cond 1))
(fcnnn3 2)
(define (fcnnn4 x) (+ 1 2 x))
(fcnnn4 10)
(define fcnnn2 2)
fcnnn2
(fcnnn2 2)
(define fcn (lambda (x) 1))
fcn
(fcn 2)
(fcn #t)
(fcn a)
(fcn (cond 1))
(define fcn2 (lambda (x) (+ 1 x)))
fcn2
(fcn2 2)
(fcn2 #t)
(fcn var1)
(define var1 10)
(fcn2 var1)
(define fcn3 (lambda (x) (+ 1 2 x)))
(fcn3 10)
(define fcn4 (lambda (x) (+ 1 a)))
(fcn4 10)
(define fcn5 (lambda (x) (cond 1)))
(fcn5 12)
(define (fcn6 y) (+ x y))
(let ([x 10]) (fcn6 15))
(define (fcn7 x) (let ([y 3]) (+ x y)))
(fcn7 10)
(define (fcn8 x) (let* ([y 3] [z (+ y 1)]) (+ y z)))
(fcn8 10)
(define (make-adder x) (lambda (y) (+ x y)))
(define ad10 (make-adder 10))
(define ad20 (make-adder 20))
(ad10 3)
(ad20 3)
(define make-adder10 (lambda (y) (+ y 10)))
(define ad (make-adder10 20))
ad
(define z 10)
(define (make-z-adder) (lambda (x) (+ x z)))
(define add-z (make-z-adder))
(add-z 5)
(define (cur x) (if (equal? x 10) #f (cur (+ x 1))))
(cur 7)
(define (ffff x) (cond [(equal? x 8) 1] [else (ffff (+ x -1))]))
(define (fact x) (cond [(equal? x 1) 1] [else (* x (fact (+ x -1)))]))
(ffff 8)
(ffff 12)
(fact 5)
(fact 1)
